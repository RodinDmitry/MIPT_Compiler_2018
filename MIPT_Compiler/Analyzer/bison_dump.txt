class { ( [ ] Red:MainArg ) { print ( new ( ) Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression ) semicolon Red:Statement Red:StatementList Red:Statement } Red:MainFunc } Red:MainClass class Red:extend Red:ClasStart { int Red:Type Red:Variable semicolon int Red:Type Red:Variable semicolon Red:public int Red:Type ( int Red:Type Red:Variable Red:Argument ) Red:ArgumentList { int Red:Type Red:Variable semicolon int Red:Type Red:Variable semicolon equal this Red:Expression Red:Dot ( Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon equal this Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression semicolon if ( this Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression ) print ( Red:value Red:Expression ) semicolon Red:Statement Red:StatementList print ( Red:value Red:Expression ) semicolon if ( this Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression ) print ( Red:value Red:Expression ) semicolon Red:Statement Red:StatementList print ( Red:value Red:Expression ) semicolon if ( this Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression ) print ( Red:value Red:Expression ) semicolon Red:Statement Red:StatementList print ( Red:value Red:Expression ) semicolon if ( this Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression ) print ( Red:value Red:Expression ) semicolon Red:Statement Red:StatementList print ( Red:value Red:Expression ) semicolon if ( this Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression ) print ( Red:value Red:Expression ) semicolon Red:Statement Red:StatementList print ( Red:value Red:Expression ) semicolon if ( this Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression ) print ( Red:value Red:Expression ) semicolon Red:Statement Red:StatementList print ( Red:value Red:Expression ) semicolon if ( this Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression ) print ( Red:value Red:Expression ) semicolon Red:Statement Red:StatementList print ( Red:value Red:Expression ) semicolon if ( this Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression ) print ( Red:value Red:Expression ) semicolon Red:Statement Red:StatementList print ( Red:value Red:Expression ) semicolon Red:Statement Red:StatementList Red:Statement Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:value Red:Expression semicolon Red:return } Red:function Red:public bool Red:Type ( int Red:Type Red:Variable Red:Argument ) Red:ArgumentList { bool Red:Type Red:Variable semicolon int Red:Type Red:Variable semicolon int Red:Type Red:Variable semicolon bool Red:Type Red:Variable semicolon int Red:Type Red:Variable semicolon int Red:Type Red:Variable semicolon int Red:Type Red:Variable semicolon equal Red:value Red:Expression semicolon equal Red:value Red:Expression semicolon equal Red:Expression Red:Dot length Red:Expression semicolon equal Red:Expression Red:BinaryOperator Red:value Red:Expression Red:Expression semicolon equal Red:value Red:Expression semicolon equal Red:value Red:Expression semicolon while ( Red:Expression ) { equal Red:Expression Red:BinaryOperator Red:Expression Red:Expression semicolon equal this Red:Expression Red:Dot ( Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon equal Red:Expression [ Red:Expression ] Red:Expression semicolon if ( Red:Expression Red:BinaryOperator Red:Expression Red:Expression ) equal Red:Expression Red:BinaryOperator Red:value Red:Expression Red:Expression semicolon Red:Statement Red:StatementList equal Red:Expression Red:BinaryOperator Red:value Red:Expression Red:Expression semicolon if ( this Red:Expression Red:Dot ( Red:Expression Red:Expression Red:expressions Red:expressions Red:expresionList ) Red:functionCall Red:Expression ) equal Red:value Red:Expression semicolon Red:Statement Red:StatementList equal Red:value Red:Expression semicolon if ( Red:Expression Red:BinaryOperator Red:Expression Red:Expression ) equal Red:value Red:Expression semicolon Red:Statement Red:StatementList equal Red:value Red:Expression semicolon Red:Statement Red:StatementList Red:Statement Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList } if ( this Red:Expression Red:Dot ( Red:Expression Red:Expression Red:expressions Red:expressions Red:expresionList ) Red:functionCall Red:Expression ) equal Red:value Red:Expression semicolon Red:Statement Red:StatementList equal Red:value Red:Expression semicolon Red:Statement Red:StatementList Red:Statement Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:Expression semicolon Red:return } Red:function Red:public int Red:Type ( int Red:Type Red:Variable Red:Argument ) Red:ArgumentList { int Red:Type Red:Variable semicolon int Red:Type Red:Variable semicolon int Red:Type Red:Variable semicolon equal Red:value Red:Expression semicolon equal Red:value Red:Expression semicolon equal Red:Expression Red:BinaryOperator Red:value Red:Expression Red:Expression semicolon while ( Red:Expression Red:BinaryOperator Red:Expression Red:Expression ) { equal Red:Expression Red:BinaryOperator Red:value Red:Expression Red:Expression semicolon equal Red:Expression Red:BinaryOperator Red:value Red:Expression Red:Expression semicolon Red:Statement Red:StatementList Red:Statement Red:StatementList } Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:Expression semicolon Red:return } Red:function Red:public bool Red:Type ( int Red:Type Red:Variable int Red:Type Red:Variable Red:Argument Red:Argument ) Red:ArgumentList { bool Red:Type Red:Variable semicolon int Red:Type Red:Variable semicolon equal Red:value Red:Expression semicolon equal Red:Expression Red:BinaryOperator Red:value Red:Expression Red:Expression semicolon if ( Red:Expression Red:BinaryOperator Red:Expression Red:Expression ) equal Red:value Red:Expression semicolon Red:Statement Red:StatementList if ( ! ( Red:Expression Red:BinaryOperator Red:Expression Red:Expression ) Red:Expression Red:Expression ) equal Red:value Red:Expression semicolon Red:Statement Red:StatementList equal Red:value Red:Expression semicolon Red:Statement Red:StatementList Red:Statement Red:Statement Red:StatementList Red:Statement Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:Expression semicolon Red:return } Red:function Red:public int Red:Type ( ) Red:ArgumentList { int Red:Type Red:Variable semicolon equal Red:value Red:Expression semicolon while ( Red:Expression Red:BinaryOperator ( Red:Expression ) Red:Expression Red:Expression ) { print ( Red:Expression [ Red:Expression ] Red:Expression )
semicolon
equal Red:Expression Red:BinaryOperator Red:value Red:Expression Red:Expression semicolon Red:Statement Red:StatementList Red:Statement Red:StatementList } print ( Red:value Red:Expression ) semicolon Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:StatementList Red:Statement Red:value Red:Expression semicolon Red:return } Red:function Red:public int Red:Type ( int Red:Type Red:Variable Red:Argument ) Red:ArgumentList { int Red:Type Red:Variable semicolon int Red:Type Red:Variable semicolon int Red:Type Red:Variable semicolon int Red:Type Red:Variable semicolon equal Red:Expression semicolon equal new int [ Red:Expression ] Red:Expression semicolon equal Red:value Red:Expression semicolon equal Red:Expression Red:BinaryOperator Red:value Red:Expression Red:Expression semicolon while ( Red:Expression Red:BinaryOperator ( Red:Expression ) Red:Expression Red:Expression ) { equal Red:value Red:Expression Red:BinaryOperator Red:Expression Red:Expression semicolon equal Red:Expression Red:BinaryOperator Red:value Red:Expression Red:Expression semicolon Red:Type 