class { ( [ ] Red:MainArg ) { print ( new ( ) Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression ) semicolon Red:StatementList Red:Statement Red:Statement } Red:MainFunc } Red:MainClass class Red:extend Red:ClasStart { Red:public int Red:Type ( ) Red:ArgumentList { Red:Type Red:Variable semicolon Red:StatementList bool Red:Type Red:Variable semicolon Red:StatementList int Red:Type Red:Variable semicolon Red:StatementList Red:Expression equal new ( ) Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression semicolon Red:StatementList print ( Red:value Red:Expression ) semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression semicolon Red:StatementList print ( Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression ) semicolon Red:StatementList print ( Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression ) semicolon Red:StatementList print ( Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression ) semicolon Red:StatementList print ( Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression ) semicolon Red:StatementList print ( Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression ) semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression semicolon Red:StatementList print ( Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression ) semicolon Red:StatementList Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:value Red:Expression semicolon Red:return } Red:function Red:ClasInt Red:ClasInt } Red:Class class Red:extend Red:ClasStart { Red:Type Red:Variable semicolon Red:Type Red:Variable semicolon int Red:Type Red:Variable semicolon bool Red:Type Red:Variable semicolon bool Red:Type Red:Variable semicolon Red:Type Red:Variable semicolon Red:public bool Red:Type ( int Red:Type Red:Variable Red:Argument ) Red:ArgumentList { Red:Expression equal Red:Expression semicolon Red:StatementList Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:Statement Red:Statement Red:value Red:Expression semicolon Red:return } Red:function Red:public bool Red:Type ( Red:Type Red:Variable Red:Argument ) Red:ArgumentList { Red:Expression equal Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:value Red:Expression semicolon Red:return } Red:function Red:public bool Red:Type ( Red:Type Red:Variable Red:Argument ) Red:ArgumentList { Red:Expression equal Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:value Red:Expression semicolon Red:return } Red:function Red:public Red:Type ( ) Red:ArgumentList { Red:Statement Red:Expression semicolon Red:return } Red:function Red:public Red:Type ( ) Red:ArgumentList { Red:Statement Red:Expression semicolon Red:return } Red:function Red:public int Red:Type ( ) Red:ArgumentList { Red:Statement Red:Expression semicolon Red:return } Red:function Red:public bool Red:Type ( int Red:Type Red:Variable Red:Argument ) Red:ArgumentList { Red:Expression equal Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:value Red:Expression semicolon Red:return } Red:function Red:public bool Red:Type ( ) Red:ArgumentList { Red:Statement Red:Expression semicolon Red:return } Red:function Red:public bool Red:Type ( ) Red:ArgumentList { Red:Statement Red:Expression semicolon Red:return } Red:function Red:public bool Red:Type ( bool Red:Type Red:Variable Red:Argument ) Red:ArgumentList { Red:Expression equal Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:value Red:Expression semicolon Red:return } Red:function Red:public bool Red:Type ( bool Red:Type Red:Variable Red:Argument ) Red:ArgumentList { Red:Expression equal Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:value Red:Expression semicolon Red:return } Red:function Red:public bool Red:Type ( int Red:Type Red:Variable int Red:Type Red:Variable Red:Argument Red:Argument ) Red:ArgumentList { bool Red:Type Red:Variable semicolon Red:StatementList int Red:Type Red:Variable semicolon Red:StatementList Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:BinaryOperator Red:value Red:Expression Red:Expression semicolon Red:StatementList ( Red:Expression Red:BinaryOperator Red:Expression Red:Expression ) Red:Expression equal Red:value Red:Expression semicolon Red:StatementList ( ! ( Red:Expression Red:BinaryOperator Red:Expression Red:Expression ) Red:Expression Red:Expression ) Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:StatementList Red:StatementList Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Expression semicolon Red:return } Red:function Red:public bool Red:Type ( int Red:Type Red:Variable Red:Argument ) Red:ArgumentList { Red:Type Red:Variable semicolon Red:StatementList bool Red:Type Red:Variable semicolon Red:StatementList bool Red:Type Red:Variable semicolon Red:StatementList int Red:Type Red:Variable semicolon Red:StatementList Red:Type Red:Variable semicolon Red:StatementList Red:Expression equal new ( ) Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal this Red:Expression semicolon Red:StatementList Red:Expression equal Red:value Red:Expression semicolon Red:StatementList while ( Red:Expression ) { Red:Expression equal Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression semicolon Red:StatementList ( Red:Expression Red:BinaryOperator Red:Expression Red:Expression ) { ( Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression ) Red:Expression equal Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression semicolon Red:StatementList { Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:Statement Red:Statement } Red:Statement Red:StatementList Red:Statement Red:Statement } Red:Statement { ( Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression ) Red:Expression equal Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression semicolon Red:StatementList { Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:Statement Red:Statement } Red:Statement Red:StatementList Red:Statement Red:Statement } Red:Statement Red:StatementList Red:Statement Red:Statement Red:Statement } Red:Statement Red:StatementList Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:value Red:Expression semicolon Red:return } Red:function Red:public bool Red:Type ( int Red:Type Red:Variable Red:Argument ) Red:ArgumentList { Red:Type Red:Variable semicolon Red:StatementList Red:Type Red:Variable semicolon Red:StatementList bool Red:Type Red:Variable semicolon Red:StatementList bool Red:Type Red:Variable semicolon Red:StatementList bool Red:Type Red:Variable semicolon Red:StatementList int Red:Type Red:Variable semicolon Red:StatementList bool Red:Type Red:Variable semicolon Red:StatementList Red:Expression equal this Red:Expression semicolon Red:StatementList Red:Expression equal this Red:Expression semicolon Red:StatementList Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:Expression equal Red:value Red:Expression semicolon Red:StatementList while ( Red:Expression ) { Red:Expression equal Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression semicolon Red:StatementList ( Red:Expression Red:BinaryOperator Red:Expression Red:Expression ) ( Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression ) { Red:Expression equal Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:Statement } Red:Statement Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:StatementList ( Red:Expression Red:BinaryOperator Red:Expression Red:Expression ) ( Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression ) { Red:Expression equal Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:Statement } Red:Statement Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:StatementList { ( Red:Expression ) ( ( ! Red:Expression Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression ) Red:Expression Red:BinaryOperator ( ! Red:Expression Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression ) Red:Expression Red:Expression ) Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:Expression equal this Red:Expression Red:Dot ( Red:Expression Red:Expression Red:expressions Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:StatementList Red:Expression equal this Red:Expression Red:Dot ( Red:Expression Red:Expression Red:expressions Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:StatementList Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:Statement Red:Statement } Red:Statement Red:StatementList Red:StatementList Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:Statement Red:Statement } Red:Statement Red:StatementList Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Expression semicolon Red:return } Red:function Red:public bool Red:Type ( Red:Type Red:Variable Red:Type Red:Variable Red:Argument Red:Argument ) Red:ArgumentList { bool Red:Type Red:Variable semicolon Red:StatementList int Red:Type Red:Variable semicolon Red:StatementList int Red:Type Red:Variable semicolon Red:StatementList ( Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression ) Red:Expression equal this Red:Expression Red:Dot ( Red:Expression Red:Expression Red:expressions Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList ( Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression ) Red:Expression equal this Red:Expression Red:Dot ( Red:Expression Red:Expression Red:expressions Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList { Red:Expression equal Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal ( Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression ) Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression semicolon Red:StatementList ( this Red:Expression Red:Dot ( Red:Expression Red:Expression Red:expressions Red:expressions Red:expresionList ) Red:functionCall Red:Expression ) { Red:Expression equal Red:Expression Red:Dot ( Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:Statement } Red:Statement { Red:Expression equal Red:Expression Red:Dot ( Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:Statement } Red:Statement Red:StatementList Red:Statement Red:Statement Red:Statement Red:Statement } Red:Statement Red:StatementList Red:StatementList Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:value Red:Expression semicolon Red:return } Red:function Red:public bool Red:Type ( Red:Type Red:Variable Red:Type Red:Variable Red:Argument Red:Argument ) Red:ArgumentList { bool Red:Type Red:Variable semicolon Red:StatementList while ( Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression ) { Red:Expression equal Red:Expression Red:Dot ( ( Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression ) Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:Statement Red:Statement } Red:Statement Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:value Red:Expression semicolon Red:return } Red:function Red:public bool Red:Type ( Red:Type Red:Variable Red:Type Red:Variable Red:Argument Red:Argument ) Red:ArgumentList { bool Red:Type Red:Variable semicolon Red:StatementList while ( Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression ) { Red:Expression equal Red:Expression Red:Dot ( ( Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression ) Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:Statement Red:Statement } Red:Statement Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:Expression Red:Dot ( Red:value Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:value Red:Expression semicolon Red:return } Red:function Red:public int Red:Type ( int Red:Type Red:Variable Red:Argument ) Red:ArgumentList { bool Red:Type Red:Variable semicolon Red:StatementList int Red:Type Red:Variable semicolon Red:StatementList Red:Type Red:Variable semicolon Red:StatementList int Red:Type Red:Variable semicolon Red:StatementList Red:Expression equal this Red:Expression semicolon Red:StatementList Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:Expression equal Red:value Red:Expression semicolon Red:StatementList while ( Red:Expression ) { Red:Expression equal Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression semicolon Red:StatementList ( Red:Expression Red:BinaryOperator Red:Expression Red:Expression ) ( Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression ) Red:Expression equal Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:StatementList ( Red:Expression Red:BinaryOperator Red:Expression Red:Expression ) ( Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression ) Red:Expression equal Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:StatementList { Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:Statement } Red:Statement Red:StatementList Red:StatementList Red:Statement Red:Statement Red:Statement } Red:Statement Red:StatementList Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:Expression semicolon Red:return } Red:function Red:public bool Red:Type ( ) Red:ArgumentList { Red:Type Red:Variable semicolon Red:StatementList bool Red:Type Red:Variable semicolon Red:StatementList Red:Expression equal this Red:Expression semicolon Red:StatementList Red:Expression equal this Red:Expression Red:Dot ( Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:value Red:Expression semicolon Red:return } Red:function Red:public bool Red:Type ( Red:Type Red:Variable Red:Argument ) Red:ArgumentList { bool Red:Type Red:Variable semicolon Red:StatementList ( Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression ) { Red:Expression equal this Red:Expression Red:Dot ( Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Statement Red:Statement } Red:Statement Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:StatementList print ( Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression ) semicolon Red:StatementList ( Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression ) { Red:Expression equal this Red:Expression Red:Dot ( Red:Expression Red:Dot ( Red:expressionList ) Red:functionCall Red:Expression Red:expressions Red:expresionList ) Red:functionCall Red:Expression semicolon Red:StatementList Red:Statement Red:Statement } Red:Statement Red:Expression equal Red:value Red:Expression semicolon Red:StatementList Red:StatementList Red:Statement Red:Statement Red:Statement Red:Statement Red:Statement Red:value Red:Expression semicolon Red:return } Red:function Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt Red:ClasInt } Red:Class Red:ClasDecl Red:ClasDecl Red:ClasDecl Red:Goal 